

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://0.0.0.0:8080/</id>
  <title>Zhe's blog</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2023-08-03T14:15:23+08:00</updated>
  <author>
    <name>Zhe</name>
    <uri>http://0.0.0.0:8080/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://0.0.0.0:8080/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://0.0.0.0:8080/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 Zhe </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Git多账户使用说明</title>
    <link href="http://0.0.0.0:8080/posts/Git%E5%A4%9A%E8%B4%A6%E6%88%B7%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/" rel="alternate" type="text/html" title="Git多账户使用说明" />
    <published>2022-07-12T18:23:42+08:00</published>
  
    <updated>2022-07-12T18:23:42+08:00</updated>
  
    <id>http://0.0.0.0:8080/posts/Git%E5%A4%9A%E8%B4%A6%E6%88%B7%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <content src="http://0.0.0.0:8080/posts/Git%E5%A4%9A%E8%B4%A6%E6%88%B7%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/" />
    <author>
      <name>Zhe</name>
    </author>

  
    
    <category term="IT业务" />
    
    <category term="y2022" />
    
    <category term="Git相关" />
    
  

  
    <summary>
      





      用户信息配置

对于多账户，不使用--global，而是在仓库根目录设置账户信息（即此类方式对每个仓库设置不同的账户）。


  我选择此方式的原因是之前已有global账户又不想删除


举例

我的本地全局账户是quanju，想在本地多加一个账户xinhu，远端Gitee有个仓库YuQuePics

1.配置多个SSH-key

1.1.根据邮箱生成指定名称的rsa

$ ssh-keygen -t rsa -C 'xinhu@example.com' -f ~/.ssh/gitee_xinhuGit_id_rsa


1.2.修改config文件（是本地仓库根目录中.git/config的文件）， 添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）

# gitee
Host xinhu
HostName gitee.c...
    </summary>
  

  </entry>

  
  <entry>
    <title>Git使用者在Gitee上的体验</title>
    <link href="http://0.0.0.0:8080/posts/Git%E4%BD%BF%E7%94%A8%E8%80%85%E5%9C%A8Gitee%E4%B8%8A%E7%9A%84%E4%BD%93%E9%AA%8C/" rel="alternate" type="text/html" title="Git使用者在Gitee上的体验" />
    <published>2022-05-30T19:39:26+08:00</published>
  
    <updated>2022-05-30T19:39:26+08:00</updated>
  
    <id>http://0.0.0.0:8080/posts/Git%E4%BD%BF%E7%94%A8%E8%80%85%E5%9C%A8Gitee%E4%B8%8A%E7%9A%84%E4%BD%93%E9%AA%8C/</id>
    <content src="http://0.0.0.0:8080/posts/Git%E4%BD%BF%E7%94%A8%E8%80%85%E5%9C%A8Gitee%E4%B8%8A%E7%9A%84%E4%BD%93%E9%AA%8C/" />
    <author>
      <name>Zhe</name>
    </author>

  
    
    <category term="IT业务" />
    
    <category term="y2022" />
    
    <category term="Git相关" />
    
  

  
    <summary>
      





      

背景

故事来自B站开源青年一期节目

为啥会收集这个故事呢，我在Gitee上有托管代码也用过Git，但故事里的背景我没遇到，如果以后遇到了那就拿来用。


  故事案例

  首先Fork了一个超过3G的项目，提示项目超过3G有三次瘦身机会，他使用了一次瘦身后成功Fork，使用clone命令将项目下载到本地始终不成功，他删除了除master以外的所有分支clone还是不成功，最后他在clone时加上参数depth，项目终于克隆到本地，项目修改完成但push提交不上去提示图片超过300M，咨询了经常使用Gitee的人，才知道要分好几次push然后在提交pr的时候合并。最终他用了1个小时将这个项目完成了升级，然后用7个小时在折腾Gitee，最后还没有明白如何顺利的将代码push上去。（PS，什么项目这么大，MySQL）



  （目前20220527 奥思网络（gitee所属公司...
    </summary>
  

  </entry>

  
  <entry>
    <title>如何通过git clone克隆仓库项目</title>
    <link href="http://0.0.0.0:8080/posts/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87git_clone%E5%85%8B%E9%9A%86%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/" rel="alternate" type="text/html" title="如何通过git clone克隆仓库项目" />
    <published>2022-05-11T12:49:20+08:00</published>
  
    <updated>2022-05-11T12:49:20+08:00</updated>
  
    <id>http://0.0.0.0:8080/posts/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87git_clone%E5%85%8B%E9%9A%86%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/</id>
    <content src="http://0.0.0.0:8080/posts/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87git_clone%E5%85%8B%E9%9A%86%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/" />
    <author>
      <name>Zhe</name>
    </author>

  
    
    <category term="IT业务" />
    
    <category term="y2022" />
    
    <category term="Git相关" />
    
    <category term="Gitee帮助中心" />
    
  

  
    <summary>
      





      在前面我们介绍了Git支持多种数据传输协议，有 git:// 协议、http(s):// 和 user@server:/path.git表示的 SSH 传输协议。我们可以通过这三种协议，对项目/仓库进行克隆操作。

下面，我们将以仓库 git@git.oschina.net:zxzllyj/sample-project.git 为例，对项目/仓库进行克隆。

通过HTTPS协议克隆

git clone https://gitee.com/zxzllyj/sample-project.git


通过SSH协议克隆

git clone git@gitee.com:zxzllyj/sample-project.git


以克隆仓库git@gitee.com:zxzllyj/sample-project.git为例(注:本处使用的是ssh地址，因为演示机已经配置好ssh公钥，故可以使...
    </summary>
  

  </entry>

  
  <entry>
    <title>如何进行分支合并</title>
    <link href="http://0.0.0.0:8080/posts/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/" rel="alternate" type="text/html" title="如何进行分支合并" />
    <published>2022-05-11T12:49:15+08:00</published>
  
    <updated>2022-05-11T12:49:15+08:00</updated>
  
    <id>http://0.0.0.0:8080/posts/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/</id>
    <content src="http://0.0.0.0:8080/posts/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/" />
    <author>
      <name>Zhe</name>
    </author>

  
    
    <category term="IT业务" />
    
    <category term="y2022" />
    
    <category term="Git相关" />
    
    <category term="Gitee帮助中心" />
    
  

  
    <summary>
      





      分支合并分为两种情况,一种是本地分支合并,一种是远程分支合并到本地分支,下面,分别用GIF动画演示

本地合并分支:



远程分支合并



来源Gitee


    </summary>
  

  </entry>

  
  <entry>
    <title>如何进行版本回退</title>
    <link href="http://0.0.0.0:8080/posts/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/" rel="alternate" type="text/html" title="如何进行版本回退" />
    <published>2022-05-11T12:49:10+08:00</published>
  
    <updated>2022-05-11T12:49:10+08:00</updated>
  
    <id>http://0.0.0.0:8080/posts/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/</id>
    <content src="http://0.0.0.0:8080/posts/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/" />
    <author>
      <name>Zhe</name>
    </author>

  
    
    <category term="IT业务" />
    
    <category term="y2022" />
    
    <category term="Git相关" />
    
    <category term="Gitee帮助中心" />
    
  

  
    <summary>
      





      版本回退有多种方式,下面一一演示:

回退到当前版本(放弃所有修改)



放弃某一个文件的修改



回退到某一版本但保存自该版本起的修改



回退到某一版本并且放弃所有的修改



回退远程仓库的版本

先在本地切换到远程仓库要回退的分支对应的本地分支，然后本地回退至你需要的版本，然后执行：

git push &amp;lt;仓库名&amp;gt; &amp;lt;分支名&amp;gt; -f 


如何以当前版本为基础，回退指定个commit

首先，确认你当前的版本需要回退多少个版本，然后计算出你要回退的版本数量，执行如下命令

git reset HEAD~X //X代表你要回退的版本数量，是数字！！！！


需要注意的是，如果你是合并过分支，那么背合并分支带过来的commit并不会被计入回退数量中，而是只计算一个，所以如果需要一次回退多个commit，不建议使用这种方法

如何回退到和远程版本一样
...
    </summary>
  

  </entry>

</feed>


